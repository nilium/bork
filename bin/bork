#!/usr/bin/env ruby -w

require 'bork'
require 'bork/hub'

module Bork

  class JumpPad
    @@BORK_VERSION_TEXT = "bork v#{Bork.version}"

    def self.version_string
      @@BORK_VERSION_TEXT
    end

    @@DEFAULT_TEXT = <<-EOS.gsub(/^ {6}/, '')
      #{self.version_string}
      Use 'bork help' to see available commands.
    EOS

    def default_text
      @@DEFAULT_TEXT
    end

    def error_cmd cmd
      puts "bork: #{cmd} is not a bork command."
      exit 1
    end

    def no_cmd
      puts default_text
      exit 0
    end

    def exec_bork_cmd cmd, args, options = {}
      # begin
        Bork::Hub.default_hub.run cmd, args, options
      # rescue
        # error_cmd cmd
      # end
    end

    def get_arguments argv
      argv = Marshal.load(Marshal.dump(argv))

      # station assignment is pointless but helps to illustrate it's an option
      cmd = argv.shift
      station = nil
      options = {
        :verbose => false,
        :station => nil
      }

      # get arguments
      while cmd.start_with? '-' && ! argv.empty?
        case cmd
        when '--verbose', '-v' then options[:verbose] = true
        when '--station', '-s' then
          station = Bork.find_station argv.shift
          Bork.error_no_station if station.nil?
          options[:station] = station
        else
          puts "bork: Invalid option: #{cmd}"
          exit 1
        end
        cmd = argv.shift
      end

      cmd = cmd.to_sym

      return cmd, argv, options
    end

    def run argv
      no_cmd if argv.empty?

      cmd, argv, options = get_arguments argv

      Bork.load_commands
      exec_bork_cmd cmd, argv, options
    end

  end # Main

end

if __FILE__ == $0
  Bork::JumpPad.new.run ARGV
end
